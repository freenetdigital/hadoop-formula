<?xml version="1.0" encoding="utf-8"?>
{%- from 'hadoop/settings.sls' import hadoop with context -%}
{%- from 'hadoop/knox/settings.sls' import knox with context -%}
{%- from 'hadoop/hdfs/settings.sls' import hdfs with context -%}
{%- from 'hadoop/hive/settings.sls' import hive with context -%}
{%- from 'hadoop/yarn/settings.sls' import yarn with context -%}
{%- from 'hadoop/solr/settings.sls' import solr with context -%}
{%- from 'hadoop/ranger/settings.sls' import ranger with context -%}
{%- from 'zookeeper/settings.sls'   import zk   with context -%}
{%- set hive_cfg = hive.get('config_hive_site', {}) %}
<!--
     SALT-MANAGED
-->
<topology>
    <gateway> 
        <provider>
            <role>authentication</role>
            <name>ShiroProvider</name>
            <enabled>true</enabled>
            <param>
                <name>sessionTimeout</name>
                <value>30</value>
            </param>
            <param>
                <name>main.ldapRealm</name>
                <value>org.apache.knox.gateway.shirorealm.KnoxLdapRealm</value>
            </param>
            <param>
                <name>main.ldapContextFactory</name>
                <value>org.apache.knox.gateway.shirorealm.KnoxLdapContextFactory</value>
            </param>
           <param>
               <name>main.ldapGroupContextFactory</name>
               <value>org.apache.knox.gateway.shirorealm.KnoxLdapContextFactory</value>
           </param>
            <param>
                <name>main.ldapRealm.contextFactory.url</name>
                <value>ldaps://{{ knox.ldap_host }}:{{ knox.ldap_port }}</value>
            </param>
            <param>
                <name>main.ldapRealm.authorizationEnabled</name>
                <value>true</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory.systemUsername</name>
                <value>{{ knox.ldap_user }}</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory.systemPassword</name>
                <value>{{ knox.ldap_pass }}</value>
            </param>
                <param>
                <name>main.ldapRealm.userSearchAttributeName</name>
                <value>sAMAccountName</value>
            </param>
            <param>
                <name>main.ldapRealm.userObjectClass</name>
                <value>person</value>
            </param>
	    <param>
                <name>main.ldapRealm.searchBase</name>
                <value>{{ knox.ldap_searchbase }}</value>
            </param>
            <param>
                <name>main.ldapRealm.groupObjectClass</name>
                <value>group</value>
            </param>
            <param>
                <name>main.ldapRealm.groupSearchBase</name>
                <value>{{ knox.ldap_group_searchbase }}</value>
            </param>
            <param>
                <name>main.ldapRealm.memberAttribute</name>
                <value>member</value>
            </param>
            <param>
                <name>main.ldapRealm.groupIdAttribute</name>
                <value>sAMAccountName</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory.authenticationMechanism</name>
                <value>simple</value>
            </param>
            <param>
                <name>main.cacheManager</name>
                <value>org.apache.shiro.cache.ehcache.EhCacheManager</value>
            </param>
            <param>
                <name>main.securityManager.cacheManager</name>
                <value>$cacheManager</value>
            </param>
            <param>
                <name>main.ldapRealm.authenticationCachingEnabled</name>
                <value>true</value>
            </param>
            <param>
                <name>urls./**</name>
                <value>authcBasic</value>
            </param>
        </provider>
        <provider>
            <role>authorization</role>
	    {%- if knox.ranger_plugin %}
            <name>XASecurePDPKnox</name>
            <enabled>true</enabled>
	    {%- else %}
            <name>AclsAuthz</name>
            <enabled>true</enabled>
            <param>
                <name>knox.acl</name>
                <value>{{ knox.cluster_topology.acl }}</value>
            </param>
	    {%- endif %}
        </provider>
        <provider>
            <role>identity-assertion</role>
            <name>Default</name>
            <enabled>true</enabled>
        </provider>
{%- set solr_target = 'G@role:solr and G@clustername:' + grains['cluster_id'] -%}
{%- set solr_grains = salt['mine.get'](solr_target, 'grains.item', expr_form='compound') -%}
{%- if hdfs.namenode_count > 1 or solr_grains.items()|length > 0 %}
        <provider>
            <role>ha</role>
            <name>HaProvider</name>
            <enabled>true</enabled>
	    {%- if hdfs.namenode_count > 1 %}
            <param>
                <name>WEBHDFS</name>
                <value>maxFailoverAttempts=3;failoverSleep=1000;maxRetryAttempts=300;retrySleep=1000;enabled=true</value>
            </param>
	    {%- endif %}
	    {%- if solr_grains.items()|length > 0 %}
	    <param>
                <name>SOLR</name>
		<value>maxFailoverAttempts=3;failoverSleep=1000;enabled=true;zookeeperEnsemble={{ zk.connection_string }}</value>
            </param>
	    {%- endif %}
        </provider>
{%- endif %}
    </gateway>

{%- if hdfs.namenode_count > 1 %}
    <service>
        <role>HDFSUI</role>
	{%- if hadoop.secure_mode %}
         <url>https://{{ hdfs.namenode_hosts|first() }}:50470</url>
	 {%- else %}
         <url>http://{{ hdfs.namenode_hosts|first() }}:{{ hdfs.namenode_http_port }}</url>
	 {%- endif %}
    </service>
    <service>
        <role>NAMENODE</role>
        <url>hdfs://{{ hdfs.namenode_hosts|first() }}:{{ hdfs.namenode_port }}</url>
    </service>

    <service>
        <role>WEBHDFS</role>
{%- for namenode in hdfs.namenode_hosts %}
	{%- if hadoop.secure_mode %}
         <url>https://{{ namenode }}:50470/webhdfs</url>
	 {%- else %}
         <url>http://{{ namenode }}:{{ hdfs.namenode_http_port }}/webhdfs</url>
	 {%- endif %}
{% endfor -%}
    </service>
{%- else -%}
{%- if hdfs.namenode_count == 1 %}
    <service>
	{%- if hadoop.secure_mode %}
        <url>https://{{ hdfs.namenode }}:50470</url>
	 {%- else %}
        <url>http://{{ hdfs.namenode }}:{{ hdfs.namenode_http_port }}</url>
	 {%- endif %}
        <role>HDFSUI</role>
    </service>
    <service>
        <role>NAMENODE</role>
        <url>hdfs://{{ hdfs.namenode }}:{{ hdfs.namenode_port }}</url>
    </service>
    <service>
        <role>WEBHDFS</role>
	{%- if hadoop.secure_mode %}
         <url>https://{{ hdfs.namenode }}:50470/webhdfs</url>
	 {%- else %}
         <url>http://{{ hdfs.namenode }}:{{ hdfs.namenode_http_port }}/webhdfs</url>
	 {%- endif %}
    </service>
{%- endif -%}
{%- endif %}
    <service>
        <role>JOBTRACKER</role>
        <url>rpc://localhost:8050</url>
    </service>
    <service>
        <role>WEBHCAT</role>
        <url>http://localhost:50111/templeton</url>
    </service>
    {%- set thrift_port = hive_cfg.get('hive.server2.thrift.http.port', {}) -%}
    {%- set thrift_path = hive_cfg.get('hive.server2.thrift.http.path', {}) -%}
    {%- set hive_target = 'G@role:hive and G@clustername:' + grains['cluster_id'] -%}
    {%- set hive_grains = salt['mine.get'](hive_target, 'grains.item','compound') -%}
    {%- if thrift_port and thrift_path and hive_grains and hive_grains.keys()|length == 1 %}
    <service>
        <role>HIVE</role>
	{%- for minion in hive_grains.keys() %}
	<url>http://{{ hive_grains[minion]['fqdn'] }}:{{ thrift_port.value }}/{{ thrift_path.value }}</url>
	{%- endfor %}
    </service>
    {%- endif -%}
    {%- if yarn.resourcemanager_hosts %}
    <service>
        <role>YARNUI</role>
	{%- if hadoop.secure_mode %}
        <url>https://{{ yarn.resourcemanager_hosts|first() }}:8090</url>
	{%- else %}
        <url>http://{{ yarn.resourcemanager_hosts|first() }}:{{ yarn.resourcemanager_webapp_port }}</url>
	{% endif %}
    </service>
    <service>
        <role>RESOURCEMANAGER</role>
	{%- if hadoop.secure_mode %}
	<url>https://{{ yarn.resourcemanager_hosts|first() }}:8090/ws</url>
	{%- else %}
        <url>http://{{ yarn.resourcemanager_hosts|first() }}:{{ yarn.resourcemanager_webapp_port }}/ws</url>
	{%- endif %}
    </service>
    {%- endif %}
    {%- if solr_grains.items()|length > 0 %}
    <service>
        <role>SOLR</role>
        <version>6.0.0</version>
    </service>
    {%- endif %}
</topology>
